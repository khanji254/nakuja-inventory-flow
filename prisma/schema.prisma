// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#3B82F6")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users             User[]
  inventoryItems    InventoryItem[]
  purchaseRequests  PurchaseRequest[]
  purchaseLists     PurchaseList[]
  billOfMaterials   BillOfMaterials[]
  purchaseListItems PurchaseListItem[]
  bomItems          BOMItem[]
  teamLeadId        String?
  teamLead          User?              @relation("TeamLead", fields: [teamLeadId], references: [id])
  UserProfile       UserProfile[]

  @@map("teams")
}

// Users and Authentication
model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String // Hashed password
  role        UserRole
  teamId      String?
  team        Team?     @relation(fields: [teamId], references: [id])
  permissions String[]
  isActive    Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdInventoryItems    InventoryItem[]   @relation("CreatedBy")
  updatedInventoryItems    InventoryItem[]   @relation("UpdatedBy")
  createdPurchaseRequests  PurchaseRequest[] @relation("RequestedBy")
  approvedPurchaseRequests PurchaseRequest[] @relation("ApprovedBy")
  createdPurchaseLists     PurchaseList[]    @relation("CreatedBy")
  createdBOMs              BillOfMaterials[] @relation("CreatedBy")
  createdVendors           Vendor[]          @relation("CreatedBy")
  notifications            Notification[]
  leadsTeam                Team[]            @relation("TeamLead")
  auditLogs                AuditLog[]
  UserProfile              UserProfile?

  @@map("users")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  email       String
  role        UserRole
  teamId      String?
  team        Team?     @relation(fields: [teamId], references: [id])
  avatar      String?
  phone       String?
  department  String?
  joinDate    DateTime
  bio         String?
  skills      String[]
  preferences Json // UI preferences, notifications, etc.
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("user_profiles")
}

// Inventory Management
model InventoryItem {
  id                 String              @id @default(cuid())
  name               String
  category           String
  vendor             String
  unitPrice          Decimal             @db.Decimal(12, 2)
  currentStock       Int
  quantity           Int
  reorderPoint       Int
  location           String?
  partNumber         String?
  minStock           Int?
  description        String?
  priority           Priority?
  eisenhowerQuadrant EisenhowerQuadrant?
  isPending          Boolean             @default(false)
  lastUpdated        DateTime            @updatedAt
  createdAt          DateTime            @default(now())

  // Relations
  createdById String
  createdBy   User    @relation("CreatedBy", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User    @relation("UpdatedBy", fields: [updatedById], references: [id])
  teamId      String?
  team        Team?   @relation(fields: [teamId], references: [id])

  bomItems     BOMItem[]
  pendingItems PendingInventoryItem[]

  @@map("inventory_items")
}

model PendingInventoryItem {
  id                String              @id @default(cuid())
  originalRequestId String?
  expectedQuantity  Int
  actualQuantity    Int?
  receivedDate      DateTime?
  qualityCheck      QualityCheckStatus? @default(PENDING)
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@map("pending_inventory_items")
}

// Purchase Management
model PurchaseRequest {
  id                 String              @id @default(cuid())
  itemName           String
  title              String?
  description        String?
  type               String?
  unitPrice          Decimal             @db.Decimal(12, 2)
  quantity           Int
  urgency            Urgency
  vendor             String
  requestedDate      DateTime            @default(now())
  status             PurchaseStatus      @default(PENDING)
  approvedDate       DateTime?
  notes              String?
  teamId             String?
  team               Team?               @relation(fields: [teamId], references: [id])
  eisenhowerQuadrant EisenhowerQuadrant?
  listId             String?
  orderNumber        String?
  deliveryDate       DateTime?
  isLowStockItem     Boolean             @default(false)
  movedToPending     Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  requestedById String
  requestedBy   User    @relation("RequestedBy", fields: [requestedById], references: [id])
  approvedById  String?
  approvedBy    User?   @relation("ApprovedBy", fields: [approvedById], references: [id])

  purchaseList PurchaseList?      @relation(fields: [listId], references: [id])
  listItems    PurchaseListItem[]

  @@map("purchase_requests")
}

model PurchaseList {
  id            String             @id @default(cuid())
  title         String
  description   String?
  teamId        String?
  team          Team?              @relation(fields: [teamId], references: [id])
  category      String
  color         String
  vendors       String[]
  status        PurchaseListStatus @default(DRAFT)
  totalAmount   Decimal            @db.Decimal(12, 2)
  submittedDate DateTime?
  approvedDate  DateTime?
  orderDate     DateTime?
  completedDate DateTime?
  notes         String?
  createdDate   DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  items    PurchaseListItem[]
  requests PurchaseRequest[]

  @@map("purchase_lists")
}

model PurchaseListItem {
  id          String     @id @default(cuid())
  requestId   String?
  itemName    String
  description String?
  quantity    Int
  unitPrice   Decimal    @db.Decimal(12, 2)
  totalPrice  Decimal    @db.Decimal(12, 2)
  vendor      String
  category    String
  location    String?
  urgency     Urgency
  notes       String?
  status      ItemStatus @default(PENDING)
  teamId      String?
  team        Team?      @relation(fields: [teamId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  listId  String
  list    PurchaseList     @relation(fields: [listId], references: [id], onDelete: Cascade)
  request PurchaseRequest? @relation(fields: [requestId], references: [id])

  @@map("purchase_list_items")
}

// Bill of Materials
model BillOfMaterials {
  id               String     @id @default(cuid())
  itemName         String
  name             String?
  description      String?
  partNumber       String?
  category         String?
  requiredQuantity Int
  unitPrice        Decimal    @db.Decimal(12, 2)
  vendor           String
  teamId           String?
  team             Team?      @relation(fields: [teamId], references: [id])
  totalCost        Decimal?   @db.Decimal(12, 2)
  status           BOMStatus? @default(DRAFT)
  createdDate      DateTime   @default(now())
  lastUpdated      DateTime   @updatedAt
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])

  items BOMItem[]

  @@map("bill_of_materials")
}

model BOMItem {
  id               String   @id @default(cuid())
  itemName         String
  description      String?
  partNumber       String?
  category         String?
  requiredQuantity Int
  quantity         Int
  unitPrice        Decimal  @db.Decimal(12, 2)
  totalPrice       Decimal  @db.Decimal(12, 2)
  vendor           String
  teamId           String?
  team             Team?    @relation(fields: [teamId], references: [id])
  availableStock   Int?
  shortfall        Int?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  bomId           String
  bom             BillOfMaterials @relation(fields: [bomId], references: [id], onDelete: Cascade)
  inventoryItemId String?
  inventoryItem   InventoryItem?  @relation(fields: [inventoryItemId], references: [id])

  @@map("bom_items")
}

// Vendor Management
model Vendor {
  id                 String   @id @default(cuid())
  name               String
  companyName        String
  contactPerson      String?
  email              String?
  phone              String
  alternativePhone   String?
  location           Json // Changed from VendorLocation type
  paymentMethods     Json // Changed from PaymentInfo[] type
  category           String?
  rating             Float?   @db.Real
  notes              String?
  website            String?
  registrationNumber String?
  taxNumber          String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("vendors")
}

// Notifications
model Notification {
  id              String           @id @default(cuid())
  title           String
  message         String
  type            NotificationType
  priority        Priority
  read            Boolean          @default(false)
  relatedItemId   String?
  relatedItemType RelatedItemType?
  actionUrl       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Audit Log for tracking all changes
model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  tableName String
  recordId  String?
  oldValues Json?
  newValues Json?
  changes   Json? // Specific fields that changed
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  SUPER_ADMIN // Full system access
  ADMIN // Full access to their organization
  SUPERVISOR // Can see all teams, limited edit access
  TEAM_LEAD // Full access to their team
  PURCHASING_LEAD // Can approve purchases across teams
  INVENTORY_LEAD // Can edit inventory across teams
  MEMBER // Basic access to their team
}

enum Priority {
  URGENT
  IMPORTANT
  NORMAL
  LOW
}

enum EisenhowerQuadrant {
  IMPORTANT_URGENT
  IMPORTANT_NOT_URGENT
  NOT_IMPORTANT_URGENT
  NOT_IMPORTANT_NOT_URGENT
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  COMPLETED
}

enum PurchaseListStatus {
  DRAFT
  SUBMITTED
  APPROVED
  ORDERED
  COMPLETED
}

enum ItemStatus {
  PENDING
  ORDERED
  DELIVERED
}

enum BOMStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

enum QualityCheckStatus {
  PENDING
  PASSED
  FAILED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum RelatedItemType {
  INVENTORY
  PURCHASE_REQUEST
  BOM
  TEAM
  USER
}

enum PaymentMethod {
  PAYBILL
  PAYBILL_WITH_STORE
  TILL_NUMBER
  POCHI_LA_BIASHARA
  SEND_MONEY
  BANK_TRANSFER
  CASH
  CREDIT_CARD
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  APPROVE
  REJECT
}
